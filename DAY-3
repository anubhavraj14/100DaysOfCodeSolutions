Ques1. https://leetcode.com/problems/gas-station/description/
------------CODE------------------- 
class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        int sum1=0,sum2=0,temp=0,final=0;
        sum1 = accumulate(gas.begin(),gas.end(),sum1);
        sum2 = accumulate(cost.begin(),cost.end(),sum2);
        if(sum2>sum1) return -1;
        
        for(int i=0; i<gas.size(); i++){
            temp += gas[i]-cost[i];
            if(temp<0) {final = i+1; temp=0;}
        }
        return final;
    }
};

Ques2. https://leetcode.com/problems/shortest-distance-to-target-string-in-a-circular-array/description/
------------CODE------------------- 
class Solution {
public:
    int closetTarget(vector<string>& words, string target, int startIndex) {
        int n = words.size();
        if(words[startIndex]==target) return 0;
        int forw=0,back=0,count=0;

        for(int i=startIndex; i<n || count<n; i++){
            count ++;
            if(target==words[(i+1)%n]){
                forw = count;
                break;}}
            
        count=0;
        for(int i=startIndex; i<n && count<n; i--){
            count ++;
            if(target == words[(i-1+n)%n]){
                back = count;
                break;}}
            
        if(back==0) return -1;
        if(forw>back) return back;
        else return forw;
        
    }
};
